.TH PRINTF_FACTORY 3 "July 25, 2025" "Custom printf implementation"

.SH NAME
printf_factory \- modular and extensible printf clone

.SH SYNOPSIS
.B int printf_factory(const char *format, ...);

.SH DESCRIPTION
\fBprintf_factory\fR is a custom implementation of the C
\fIprintf\fR function supporting a variety of standard and custom format specifiers,
with full handling of length modifiers, flags, width, and precision.

.SH SUPPORTED SPECIFIERS
Standard specifiers supported:
.IP
\fI%i, %d\fR — signed integers
.IP
\fI%b\fR — binary representation
.IP
\fI%o\fR — octal representation
.IP
\fI%x, %X\fR — hexadecimal representation (lowercase and uppercase)
.IP
\fI%s\fR — string
.IP
\fI%u\fR — unsigned integers

.SH LENGTH MODIFIERS
The following length modifiers are supported:
.IP
\fIhh\fR — signed char / unsigned char
.IP
\fIh\fR — short int / unsigned short int
.IP
\fIl\fR — long int / unsigned long int

.SH FLAGS, WIDTH, AND PRECISION
Handles standard flags, width, and precision specifiers in the format string.

.SH CUSTOM SPECIFIERS
Supports additional custom format specifiers:
.IP
\fI%S\fR — prints special characters as hexadecimal escape sequences
.IP
\fI%r\fR — reverses the string argument
.IP
\fI%R\fR — applies ROT13 cipher to the string argument

.SH MEMORY MANAGEMENT
Handler functions return freshly allocated strings which are then processed through
a standard pipeline to apply width, flags, and precision before output.
The caller is responsible for freeing any dynamically allocated memory.

.SH EXTENSIBILITY
New specifiers can be added easily by extending the handler functions and updating
the dispatch mechanism in the factory.

.SH RETURN VALUE
On success, returns the total number of characters printed.
Returns -1 if an error occurs during processing.

.SH AUTHOR
Adel Mejrissi, Jeremy Laurens
